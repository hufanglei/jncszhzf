<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:jdbc_dev.properties" />

	<!-- 主容器不扫描@Controller 和 @controllerAdvice 两个注解 -->
	<context:component-scan base-package="com.java.activiti" >
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>


	<!-- 配置数据源 -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${pos.driverClassName}" />
		<property name="url" value="${pos.url}" />
		<property name="username" value="${pos.username}" />
		<property name="password" value="${pos.password}" />
	</bean>

	<!-- 配置mybatis的sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mappers.xml文件 -->
		<property name="mapperLocations" value="classpath:com/java/activiti/mappers/*.xml"></property>
		<!-- mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.java.activiti.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- 由spring管理mybatis的事务 如果不出现一个方法需要配置两个事务的情况 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="serviceLocator" class="com.java.activiti.service.ServiceLocator">
	</bean>

	<bean id="springUtil" class="com.java.core.util.SpringUtil" />
	

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven proxy-target-class="true" />

	<!-- 配置事务切面 -->
	<aop:config>
	    <aop:aspect id="logAspect" ref="logAspectBean">  
			<aop:pointcut id="serviceOperation"
				expression="execution(* com.java.activiti.service.*.*(..))" />
		 </aop:aspect>
	</aop:config>  
      
    <bean id="logAspectBean" class="com.java.activiti.util.LogAspect" />
    
	<!-- 导入Activiti配置 -->
	<import resource="classpath:activiti-context.xml" />
	<!-- 导入缓存配置 -->
	<import resource="classpath:application-cache.xml" />

	<import resource="classpath:application-dao.xml" />
</beans>